const fs = require("fs");
const path = require("path");
const mongoose = require("mongoose");
const express = require("express");
const cors = require("cors");
require("dotenv").config();
// K·∫øt n·ªëi MongoDB
const app = express();
const PORT = process.env.PORT || 3000;
mongoose.connect(mongoURI)
  .then(() => console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng"))
  .catch(err => console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err));
app.use(cors());
app.use(express.json());

  
// ƒê·ªãnh nghƒ©a schema album
const AlbumSchema = new mongoose.Schema({
    album: String,
    artist: String,
    song_count: Number,
    cover: String
});

const Album = mongoose.model("Album", AlbumSchema);

// Th∆∞ m·ª•c g·ªëc ch·ª©a t·∫•t c·∫£ ngh·ªá sƒ©
const MUSIC_DIR = "H:/cai dat/web nhac/nhac/";

async function scanAlbums() {
    const artists = fs.readdirSync(MUSIC_DIR).filter(artist => fs.statSync(path.join(MUSIC_DIR, artist)).isDirectory());

    for (const artistName of artists) {
        const artistPath = path.join(MUSIC_DIR, artistName);
        const albums = fs.readdirSync(artistPath).filter(album => fs.statSync(path.join(artistPath, album)).isDirectory());

        for (const albumName of albums) {
            const albumPath = path.join(artistPath, albumName);
            const files = fs.readdirSync(albumPath);

            // T√¨m ·∫£nh b√¨a (∆∞u ti√™n cover.jpg ho·∫∑c cover.png)
            const coverImage = files.find(file => file.startsWith("cover") && (file.endsWith(".jpg") || file.endsWith(".png"))) || "no-cover.jpg";
            const coverUrl = `/static/${artistName}/${albumName}/${coverImage}`; // ƒê∆∞·ªùng d·∫´n API hi·ªÉn th·ªã cover

            // ƒê·∫øm s·ªë b√†i h√°t
            const songCount = files.filter(file => file.endsWith(".mp3") || file.endsWith(".wav")).length;

            if (songCount > 0) {
                const newAlbum = new Album({
                    album: albumName,
                    artist: artistName, // L·∫•y t√™n ngh·ªá sƒ© t·ª´ th∆∞ m·ª•c cha
                    song_count: songCount,
                    cover: coverUrl
                });

                await Album.findOneAndUpdate({ album: albumName, artist: artistName }, newAlbum, { upsert: true });
                console.log(`‚úÖ Album: ${albumName} - Ngh·ªá sƒ©: ${artistName} (B√†i h√°t: ${songCount}) ƒë√£ ƒë∆∞·ª£c l∆∞u.`);
            }
        }
    }
    console.log("üéµ Qu√©t album ho√†n t·∫•t!");
    mongoose.connection.close();
}

scanAlbums().catch(err => console.error("‚ùå L·ªói khi qu√©t th∆∞ m·ª•c:", err));
