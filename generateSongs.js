const fs = require("fs");
const path = require("path");
const mongoose = require("mongoose");
const express = require("express");
const cors = require("cors");
require("dotenv").config();

// K·∫øt n·ªëi MongoDB
const app = express();
const PORT = process.env.PORT || 3000;
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng"))
  .catch(err => console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err));

app.use(cors());
app.use(express.json());

// ƒê·ªãnh nghƒ©a schema b√†i h√°t
const songSchema = new mongoose.Schema({
    title: String,
    artist: String,
    album: String,
    filename: String
});
const Song = mongoose.model("Song", songSchema);

// ƒê·ªãnh nghƒ©a schema album
const albumSchema = new mongoose.Schema({
    album: String,
    artist: String,
    song_count: Number,
    cover: String,
    songs: [{ title: String, filename: String }]
});
const Album = mongoose.model("Album", albumSchema);

// Th∆∞ m·ª•c ch·ª©a nh·∫°c
const musicFolder = "H:\\cai dat\\web nhac\\nhac\\The Weekend";

const importSongs = async () => {
    const files = fs.readdirSync(musicFolder);
    const albumData = {}; // L∆∞u danh s√°ch album

    for (const file of files) {
        if (path.extname(file) === ".mp3") {
            const filename = file;
            const title = file.replace(/\d+\.\s*/, "").replace(".flac", "").split(" - ")[0];
            const artist = "The Weekend"; // Ngh·ªá sƒ© c·ªë ƒë·ªãnh, c√≥ th·ªÉ c·∫≠p nh·∫≠t t·ª´ metadata n·∫øu c·∫ßn
            const album = "After Hours"; // Album c·ªë ƒë·ªãnh, c√≥ th·ªÉ c·∫≠p nh·∫≠t t·ª´ metadata n·∫øu c·∫ßn
            const albumPath = path.join(musicFolder);

            // T√¨m ·∫£nh b√¨a (∆∞u ti√™n cover.jpg, n·∫øu kh√¥ng c√≥ th√¨ cover.png)
            const coverImage = fs.existsSync(path.join(albumPath, "cover.jpg")) 
                ? "cover.jpg" 
                : fs.existsSync(path.join(albumPath, "cover.png")) 
                ? "cover.png" 
                : "no-cover.jpg";

            const coverUrl = `/static/tlinh/${coverImage}`;

            // Ki·ªÉm tra b√†i h√°t ƒë√£ t·ªìn t·∫°i ch∆∞a
            const existingSong = await Song.findOne({ filename });
            if (!existingSong) {
                await Song.create({ title, artist, album, filename });
                console.log(`‚úÖ ƒê√£ th√™m b√†i h√°t: ${title}`);
            } else {
                console.log(`‚ö†Ô∏è B·ªè qua (ƒë√£ t·ªìn t·∫°i): ${title}`);
            }

            // Th√™m b√†i h√°t v√†o danh s√°ch album
            if (!albumData[album]) {
                albumData[album] = { album, artist, cover: coverUrl, songs: [] };
            }
            albumData[album].songs.push({ title, filename });
        }
    }

    // L∆∞u album v√†o MongoDB
    for (const albumName in albumData) {
        const album = albumData[albumName];
        album.song_count = album.songs.length; // Th√™m s·ªë l∆∞·ª£ng b√†i h√°t

        await Album.findOneAndUpdate({ album: albumName }, album, { upsert: true });
        console.log(`‚úÖ ƒê√£ th√™m album: ${albumName} (${album.song_count} b√†i h√°t) - Cover: ${album.cover}`);
    }

    console.log("üéµ Ho√†n th√†nh nh·∫≠p danh s√°ch b√†i h√°t v√† album!");
    mongoose.connection.close();
};

// Ch·∫°y script
importSongs();
