const fs = require("fs");
const path = require("path");
const mongoose = require("mongoose");
const express = require("express");
const cors = require("cors");
const mm = require("music-metadata");
require("dotenv").config();

// K·∫øt n·ªëi MongoDB
const app = express();
const PORT = process.env.PORT || 3000;

mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng"))
  .catch(err => console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err));

app.use(cors());
app.use(express.json());

// ƒê·ªãnh nghƒ©a schema b√†i h√°t
const songSchema = new mongoose.Schema({
    title: String,
    artist: String,
    album: String,
    filename: String
});
const Song = mongoose.model("Song", songSchema);

// ƒê·ªãnh nghƒ©a schema album
const albumSchema = new mongoose.Schema({
    album: String,
    artist: String,
    song_count: Number,
    cover: String,
    songs: [{ title: String, filename: String }]
});
const Album = mongoose.model("Album", albumSchema);

// Th∆∞ m·ª•c ch·ª©a nh·∫°c
const musicFolder = "H:\\cai dat\\web nhac\\nhac\\The Weeknd";

const importSongs = async () => {
    const files = fs.readdirSync(musicFolder);
    const albumData = {}; // L∆∞u danh s√°ch album

    for (const file of files) {
        if (path.extname(file) === ".mp3" || path.extname(file) === ".flac") {
            const filePath = path.join(musicFolder, file);
            const filename = file;
            let title = filename.replace(".flac", ""); // M·∫∑c ƒë·ªãnh l·∫•y t·ª´ t√™n file
            let artist = "The Weeknd";
            let album = "Unknown Album";

            try {
                const metadata = await mm.parseFile(filePath);
                title = metadata.common.title || title;
                artist = metadata.common.artist || artist;
                album = metadata.common.album || album;
            } catch (error) {
                console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc metadata c·ªßa: ${filename}, d√πng t√™n file.`);
            }

            // L∆∞u b√†i h√°t v√†o database n·∫øu ch∆∞a t·ªìn t·∫°i
            const existingSong = await Song.findOne({ filename });
            if (!existingSong) {
                await Song.create({ title, artist, album, filename });
                console.log(`‚úÖ ƒê√£ th√™m b√†i h√°t: ${title} - ${artist} (${album})`);
            } else {
                console.log(`‚ö†Ô∏è B·ªè qua (ƒë√£ t·ªìn t·∫°i): ${title}`);
            }

            // C·∫≠p nh·∫≠t danh s√°ch album
            if (!albumData[album]) {
                albumData[album] = { artist, songs: [] };
            }
            albumData[album].songs.push({ title, filename });
        }
    }

    // L∆∞u album v√†o MongoDB
    

    console.log("üéµ Ho√†n th√†nh nh·∫≠p danh s√°ch b√†i h√°t v√† album!");
    mongoose.connection.close();
};

// Ch·∫°y script
importSongs();
